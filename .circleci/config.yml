# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
jobs:
  Build Frontend:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - checkout

      # Use cache for dependencies
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: Install Dependencies
          command: cd frontend && yarn install --frozen-lockfile

      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "frontend/yarn.lock" }}
          paths:
            - ~/.cache/yarn

      # Run build
      - run: cd frontend &&  yarn build

      # Run tests
      - run: cd frontend && yarn test

      # Run coverage
      - run: cd frontend && yarn codecov

      # Store node_modules
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
  Preview Frontend:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - attach_workspace:
          at: /home/circleci
      # Run Deploy Preview if PR
      - run:
          name: Deploy Preview
          command: if [ -n "$CIRCLE_PULL_REQUEST" ]; then cd frontend && ../.circleci/upload_preview.sh; fi
  Publish Welcome App:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - attach_workspace:
          at: /home/circleci

      - setup_remote_docker:
          docker_layer_caching: true

      # Push welcome-app to Dockerhub
      - run:
          name: Deploy Welcome Application to DockerHub
          command: cd frontend && yarn wa:deploy

      # Publish component storybook
      - run:
          name: Publish Storybook
          command: cd frontend && yarn comp:storybook:publish

  Build Backend:
    machine: true
    environment:
      JAVA_TOOL_OPTIONS: -Djava.net.preferIPv4Stack=true -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+ExitOnOutOfMemoryError
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          key: v1-{{ checksum "pom.xml" }}

      # Set up environment
      - run:
          name: Set up environment
          command: |
            echo export KEYCLOAK=OFFICIAL >> $BASH_ENV
            echo export ECHO_ENV=NO >> $BASH_ENV
            echo export UNSET_ENV=NO >> $BASH_ENV
            cat launcher-env-template.sh >> $BASH_ENV
            echo LAUNCHER_MISSIONCONTROL_OPENSHIFT_CLUSTERS_FILE=$(pwd -P)/clusters.yaml >> $BASH_ENV
            echo LAUNCHER_GIT_PROVIDERS_FILE=$(pwd -P)/git-providers.yaml >> $BASH_ENV
          when: always

      - run:
          name: Build project
          command: ./mvnw -V clean install -DskipTests

      - run:
          name: Update Hosts File
          command: |
            echo 8.43.84.242 devtools-dev.ext.devshift.net | sudo tee -a /etc/hosts
            cat /etc/hosts

      # run tests!
      - run:
          name: Run Integration Tests
          command: ./mvnw -V -ff test failsafe:integration-test failsafe:verify -Dfailsafe.rerunFailingTestsCount=2  -Dsurefire.rerunFailingTestsCount=2 -Pit -DfailIfNoTests=false

      - run:
          name: Uninstall artifacts
          command: rm -rf ~/.m2/repository/io/fabric8/launcher
          when: always

      - save_cache:
          paths:
            - ~/.m2
          key: v1-{{ checksum "pom.xml" }}
          when: always

      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always

      - store_test_results:
          path: ~/test-results

      - store_artifacts:
          path: ~/test-results/junit

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - Build Frontend
      - Preview Frontend:
          requires:
            - Build Frontend
          filters:
            branches:
              ignore: master
      - Publish Welcome App:
          requires:
            - Build Frontend
          filters:
            branches:
              only: master
      - Build Backend
